#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys 
import cmo

#FIXME this SHOULD NOT take pairing file as input in long term
#first version is for pipeline parity
def main(pairing_file, haplotype_vcf, pipeline_dir, final_output_file, temp_dir=None):
    vcf2maf0 = os.path.join(pipeline_dir, "vcf2maf0.py")
    outputs = ["hap_maf0", "hap_maf1", "hap_maf2", "hap_maf2b"]
    if temp_dir:
        if not os.path.exists(temp_dir):
            try:
                os.makedirs(temp_dir)
            except OSError as e:
                if e.errno == 17: #file exists, some other step already made it critical race
                    pass
                else:
                    print(e, file=sys.stderr)
                    sys.exit(1)

        outputs = [ os.path.join(temp_dir, file) for file in outputs]
    vcf2maf0_cmd = [vcf2maf0, "-c haplotypecaller", "-p" ,pairing_file, "-i", haplotype_vcf, "-o", outputs[0]]
    cmo.util.call_cmd(" ".join(vcf2maf0_cmd))
    vcf2maf_fh = open(outputs[0], "r")
    somatichc = os.path.join(pipeline_dir, "pA_qSomHC.py")
    somatichc_cmd = somatichc
    somhc_output = open(outputs[1], "w")
    cmo.util.call_cmd(somatichc, stdin=vcf2maf_fh, stdout=somhc_output)
    somhc_output.close()
    vcf2maf_fh.close()
    tcga_maf = os.path.join(pipeline_dir, "oldMAF2tcgaMAF.py")
    tcga_maf_cmd = [tcga_maf, "hg19", outputs[1], outputs[2]]
    cmo.util.call_cmd(" ".join(tcga_maf_cmd))
    tcga_maf_output = open(outputs[2], "r")
    indel_only_output = open(outputs[3], "w")
    indel_only = os.path.join(pipeline_dir, "indelOnly.py")
    cmo.util.call_cmd(indel_only, stdin=tcga_maf_output, stdout=indel_only_output)
    indel_only_output.close()
    tcga_maf_output.close()
    normalizeIndels = os.path.join(pipeline_dir, "normalizeInDels.py")
    normalize_cmd = [normalizeIndels, outputs[3], final_output_file]
    cmo.util.call_cmd(" ".join(normalize_cmd))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Do Dat PostProcessing")
    parser.add_argument("--pairing-file", required=True, help="Dat pairing file")
    parser.add_argument("--version", default="default", choices=list(cmo.util.programs['postprocess'].keys()), help="Post Process pipeline version")
    parser.add_argument("--haplotype-vcf", required=True, help="Haplotype Caller output")
    parser.add_argument("--output-file", required=True, help="destination of filtered output")
    parser.add_argument("--temp-dir", help="temp directory, if desired")
    args = parser.parse_args()
    postprocess_dir = cmo.util.programs['postprocess'][args.version]
    main(os.path.abspath(args.pairing_file), os.path.abspath(args.haplotype_vcf), postprocess_dir, os.path.abspath(args.output_file), temp_dir=args.temp_dir)

    


