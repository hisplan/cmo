#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess, itertools, glob
import cmo

def parse_script_help(script_path):
    perl = cmo.util.programs['perl']['default']
    help_text = subprocess.Popen(" ".join([perl, script_path, "-h"]),stdout=subprocess.PIPE,shell=True).communicate()[0]
    valid_args = re.findall(r"\s+(--[\S_]+)\s+([\S \t]+)\n?", help_text, re.M)
    return dict(valid_args)

if __name__ =='__main__':
    # We'll first need to figure out which version to run with "-h" to parse the help text
    preparser = argparse.ArgumentParser(description="run vcf2maf", add_help=False)
    preparser.add_argument("--version", choices=list(cmo.util.programs['vcf2maf'].keys()), default="default")
    preparser.add_argument("--vep-release", choices=list(cmo.util.programs['vep'].keys()), default="default")
    options, _ = preparser.parse_known_args()
    script_path = cmo.util.programs['vcf2maf'][options.version] + "vcf2maf.pl"
    args_dict = parse_script_help(script_path)
    parser = argparse.ArgumentParser(parents = [preparser], add_help=True)
    for arg, description in list(args_dict.items()):
        if arg == "--help":
            continue
        parser.add_argument(arg,action="store", metavar='', help=description)
    cmo.util.add_logging_options(parser)
    args = parser.parse_args()
    args_dict = vars(args)
    args_dict['vep_data']=cmo.util.programs['vep'][args.vep_release]
    args_dict['vep_path']=cmo.util.programs['vep'][args.vep_release]
    try:
        args_dict['ref_fasta']=cmo.util.genomes[args.ncbi_build]['fasta']
    except:
        args_dict['ref_fasta']=cmo.util.genomes['GRCh37']['fasta']
    for key in ["version", "vep_release"]:
        del args_dict[key]
    cmd = [cmo.util.programs['perl']['default'], script_path]
    stderr = args.stderr
    stdout = args.stdout
    args_dict = dict((k, v) for k, v in args_dict.items() if v)
    cmo.util.remove_logging_options_from_dict(args_dict)
    for arg, value in list(args_dict.items()):
        arg = arg.replace("_","-")
        cmd = cmd + ["--"+arg, value]
    cmo.util.call_cmd(" ".join(cmd), stdout=stdout, stderr=stderr)
